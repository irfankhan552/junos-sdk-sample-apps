/*
 * $Id$
 *
 * Route Manager configuration DDL
 *
 * This code is provided as is by Juniper Networks SDK Developer Support.
 * It is provided with no warranties or guarantees, and Juniper Networks
 * will not provide support or maintenance of this code in any fashion.
 * The code is provided only to help a developer better understand how
 * the SDK can be used.
 *
 * Copyright (c) 2010, Juniper Networks, Inc.
 * All rights reserved.
 */

#include "common_include.dd"
#include "trace_include.dd"

#define DNAME_RT_MNGR "route-manager"
#define RT_MNGR_STR_SIZE 128

/** Declare the daemon names for 'notify'. */
daemon-names route-manager;

/** Declare the object names for 'require'. */
require-names route-manager;

object routes-type {
    help "Routes";

    attribute destination {
        help "Route address with prefix length";
        flag nokeyword identifier;
        flag mandatory;
        type ipv4prefix-mandatory;
    }

    attribute next-hop-type {
        help "Route next-hop type";
        flag mandatory;
        type enum ubyte {
            choice unicast {
                help "Unicast route";
                define RT_NH_TYPE_UNICAST;
            }
            choice service {
                help "Service route";
                define RT_NH_TYPE_SERVICE;
            }
            choice routing-table {
                help "Routing table route";
                define RT_NH_TYPE_TABLE;
            }
            choice discard {
                help "Discard route";
                define RT_NH_TYPE_DISCARD;
            }
            choice reject {
                help "Reject route";
                define RT_NH_TYPE_REJECT;
            }
        }
    }

    attribute preference {
        help "Route preference";
        type uint;
    }

    attribute routing-table {
        help "Routing table name";
        type ranged string 1 .. RT_MNGR_STR_SIZE;
    }

    attribute state {
        help "Route state";
        type enum ushort {
            choice no-install {
                help "Not install route to forwarding table";
                define RT_STATE_NO_INSTALL;
            }
            choice no-advertise {
                help "Not advertise the route";
                define RT_STATE_NO_ADVERTISE;
            }
        }
    }

    attribute "flag" {
        help "Route flag";
        type enum ushort {
            choice overwrite {
                help "Overwrite route";
                define RT_FLAG_OVER_WRITE;
            }
        }
    }

    object gateway {
        help "Route gateways";
        flag setof list;
        flag remove-empty;

        attribute name {
            help "Gateway name";
            flag nokeyword identifier;
            flag mandatory;
            type ranged string 1 .. RT_MNGR_STR_SIZE;
        }

        attribute address {
            help "Gateway address";
            type ipv4addr;
        }

        attribute interface-name {
            help "Gateway interface name";
            type ranged string 1 .. RT_MNGR_STR_SIZE;
        }

        attribute interface-index {
            help "Gateway interface index";
            type int;
        }

        attribute interface-address {
            help "Gateway interface address";
            type ipv4addr;
        }

        attribute next-hop {
            help "The next-hop name";
            type ranged string 1 .. RT_MNGR_STR_SIZE;
        }
    }
}

object juniper-config {
    flag no-struct;

    object sync {
        help "SDK Your Net Corp. application information";
        flag no-struct;
        flag remove-empty;

        object route-manager {
            help "Configure SYNC Equilibrium II general options";
            flag remove-empty;
            notify route-manager;
            require route-manager;
            action enable-process DNAME_RT_MNGR;

            attribute routes {
                help "Routes configuration";
                flag homogeneous delta-list remove-empty;
                type setof routes-type;
            }

            /* Trace options configuration */
            object traceoptions {
                help "Route manager trace options";
                flag remove-empty;
                require trace route-manager;

                /* From trace_include.dd */
                TRACEOPTIONS_FILE;
                SYSLOG_ATTRIBUTE;

                /* Types of trace messages generated by equilibrium2-mgmt */
                object "flag" {
                    help "Tracing flag parameters";
                    flag setof list oneliner;

                    attribute flag-name {
                        flag identifier nokeyword;
                        type enum uint {
                            choice normal {
                                help "Trace normal events";
                                define TF_NORMAL;
                            }
                            choice configuration {
                                help "Trace configuration events";
                                define TF_CONFIG;
                            }
                            choice kcom {
                                help "Trace configuration events";
                                define TF_KCOM;
                            }
                            choice ssd {
                                help "Trace configuration events";
                                define TF_SSD;
                            }
                            choice "all" {
                                help "Trace everything";
                                define TF_ALL;
                            }
                        }
                    }
                }
            }
        }
    }
}

